// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/kafkaphoenix/gosurf/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// DBRepo is an autogenerated mock type for the DBRepo type
type DBRepo struct {
	mock.Mock
}

type DBRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *DBRepo) EXPECT() *DBRepo_Expecter {
	return &DBRepo_Expecter{mock: &_m.Mock}
}

// GetActions provides a mock function with given fields: uid
func (_m *DBRepo) GetActions(uid int) ([]domain.Action, bool) {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for GetActions")
	}

	var r0 []domain.Action
	var r1 bool
	if rf, ok := ret.Get(0).(func(int) ([]domain.Action, bool)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Action); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// DBRepo_GetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActions'
type DBRepo_GetActions_Call struct {
	*mock.Call
}

// GetActions is a helper method to define mock.On call
//   - uid int
func (_e *DBRepo_Expecter) GetActions(uid interface{}) *DBRepo_GetActions_Call {
	return &DBRepo_GetActions_Call{Call: _e.mock.On("GetActions", uid)}
}

func (_c *DBRepo_GetActions_Call) Run(run func(uid int)) *DBRepo_GetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBRepo_GetActions_Call) Return(_a0 []domain.Action, _a1 bool) *DBRepo_GetActions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBRepo_GetActions_Call) RunAndReturn(run func(int) ([]domain.Action, bool)) *DBRepo_GetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActions provides a mock function with no fields
func (_m *DBRepo) GetAllActions() map[int][]domain.Action {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllActions")
	}

	var r0 map[int][]domain.Action
	if rf, ok := ret.Get(0).(func() map[int][]domain.Action); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int][]domain.Action)
		}
	}

	return r0
}

// DBRepo_GetAllActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActions'
type DBRepo_GetAllActions_Call struct {
	*mock.Call
}

// GetAllActions is a helper method to define mock.On call
func (_e *DBRepo_Expecter) GetAllActions() *DBRepo_GetAllActions_Call {
	return &DBRepo_GetAllActions_Call{Call: _e.mock.On("GetAllActions")}
}

func (_c *DBRepo_GetAllActions_Call) Run(run func()) *DBRepo_GetAllActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DBRepo_GetAllActions_Call) Return(_a0 map[int][]domain.Action) *DBRepo_GetAllActions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBRepo_GetAllActions_Call) RunAndReturn(run func() map[int][]domain.Action) *DBRepo_GetAllActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with no fields
func (_m *DBRepo) GetAllUsers() map[int]domain.User {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 map[int]domain.User
	if rf, ok := ret.Get(0).(func() map[int]domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]domain.User)
		}
	}

	return r0
}

// DBRepo_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type DBRepo_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *DBRepo_Expecter) GetAllUsers() *DBRepo_GetAllUsers_Call {
	return &DBRepo_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *DBRepo_GetAllUsers_Call) Run(run func()) *DBRepo_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DBRepo_GetAllUsers_Call) Return(_a0 map[int]domain.User) *DBRepo_GetAllUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBRepo_GetAllUsers_Call) RunAndReturn(run func() map[int]domain.User) *DBRepo_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetReferrals provides a mock function with given fields: uid
func (_m *DBRepo) GetReferrals(uid int) ([]int, bool) {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for GetReferrals")
	}

	var r0 []int
	var r1 bool
	if rf, ok := ret.Get(0).(func(int) ([]int, bool)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// DBRepo_GetReferrals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReferrals'
type DBRepo_GetReferrals_Call struct {
	*mock.Call
}

// GetReferrals is a helper method to define mock.On call
//   - uid int
func (_e *DBRepo_Expecter) GetReferrals(uid interface{}) *DBRepo_GetReferrals_Call {
	return &DBRepo_GetReferrals_Call{Call: _e.mock.On("GetReferrals", uid)}
}

func (_c *DBRepo_GetReferrals_Call) Run(run func(uid int)) *DBRepo_GetReferrals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBRepo_GetReferrals_Call) Return(_a0 []int, _a1 bool) *DBRepo_GetReferrals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBRepo_GetReferrals_Call) RunAndReturn(run func(int) ([]int, bool)) *DBRepo_GetReferrals_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: id
func (_m *DBRepo) GetUser(id int) (domain.User, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 domain.User
	var r1 bool
	if rf, ok := ret.Get(0).(func(int) (domain.User, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// DBRepo_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type DBRepo_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id int
func (_e *DBRepo_Expecter) GetUser(id interface{}) *DBRepo_GetUser_Call {
	return &DBRepo_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *DBRepo_GetUser_Call) Run(run func(id int)) *DBRepo_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBRepo_GetUser_Call) Return(_a0 domain.User, _a1 bool) *DBRepo_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBRepo_GetUser_Call) RunAndReturn(run func(int) (domain.User, bool)) *DBRepo_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewDBRepo creates a new instance of DBRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBRepo {
	mock := &DBRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
